generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://root:password@localhost:5435/hopedb?schema=public"
}

model User {
  id                        String               @id @default(uuid())
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  isVerified                Boolean              @default(false)
  isDeleted                 Boolean              @default(false)
  isAchieved                Boolean              @default(false)
  phoneNumber               String?
  email                     String?              @unique
  password                  String
  isActive                  Boolean              @default(false)
  authStrategy              String?
  createdDonation           Donation[]           @relation("donation_created_by")
  updatedDonation           Donation[]           @relation("donation_updated_by")
  donations                 Donation[]           @relation("UserDonations")
  createdDonationRRequest   DonationRequest[]    @relation("donation_created_by")
  updatedDonationRRequest   DonationRequest[]    @relation("donation_updated_by")
  EmploymentDetails         EmploymentDetails?   @relation("EmploymentDetails")
  actionLogs                ActionLog[]
  bankDetails               BankDetails[]        @relation("UserBankDetails")
  createdOrphan             Orphan[]             @relation("orphan_created_by")
  updatedOrphan             Orphan[]             @relation("orphan_updated_by")
  Orphan                    Orphan?              @relation("OrphanProfile")
  createdPermissions        Permission[]         @relation("permission_created_by")
  updatedPermissions        Permission[]         @relation("permission_updated_by")
  createdProfiles           Profile[]            @relation("profile_created_by")
  updatedProfiles           Profile[]            @relation("profile_updated_by")
  profile                   Profile?             @relation("UserProfile")
  createdRequest            Request[]            @relation("request_created_by")
  updatedRequest            Request[]            @relation("request_updated_by")
  updatedSponsorshipRequest SponsorshipRequest[] @relation("sponsorship_created_by")
  createdSponsorshipRequest SponsorshipRequest[] @relation("sponsorship_updated_by")
  createdIdentities         Identity[]           @relation("identity_created_by")
  updatedIdentities         Identity[]           @relation("identity_updated_by")
  roles                     Role[]               @relation("UserRoles")

  @@map("users")
}

model Profile {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  firstName         String?
  middleName        String?
  lastName          String?
  gender            String?
  localGovernmentId String?
  dateOfBirth       DateTime?
  homeAddress       String?
  maritalStatus     String?
  phoneNumber       String?
  picture           String?
  userId            String           @unique
  createdByUserId   String?
  updatedByUserId   String?
  createdBy         User?            @relation("profile_created_by", fields: [createdByUserId], references: [id])
  localGovernment   LocalGovernment? @relation(fields: [localGovernmentId], references: [id])
  updatedBy         User?            @relation("profile_updated_by", fields: [updatedByUserId], references: [id])
  user              User             @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  identities        Identity[]

  @@map("profiles")
}

model Role {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roleName    String       @unique
  description String?
  isActive    Boolean      @default(true)
  permissions Permission[] @relation("RolePermissions")
  user        User[]       @relation("UserRoles")

  @@map("roles")
}

model Permission {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  permissionName  String   @unique
  isActive        Boolean  @default(true)
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?    @relation("permission_created_by", fields: [createdByUserId], references: [id])
  updatedBy       User?    @relation("permission_updated_by", fields: [updatedByUserId], references: [id])
  role            Role[]   @relation("RolePermissions")

  @@map("permissions")
}

model Identity {
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  number          String
  issuedBy        String?
  issueDate       DateTime?
  expiryDate      DateTime?
  profileId       String?
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?     @relation("identity_created_by", fields: [createdByUserId], references: [id])
  profile         Profile?  @relation(fields: [profileId], references: [id])
  updatedBy       User?     @relation("identity_updated_by", fields: [updatedByUserId], references: [id])

  @@id([name, number], name: "identityId")
  @@map("user_identity")
}

model State {
  id               String            @id @default(uuid())
  name             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  localGovernments LocalGovernment[] @relation("StateToLocalGovernment")
}

model LocalGovernment {
  id        String    @id @default(uuid())
  name      String
  stateId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation("StateToLocalGovernment", fields: [stateId], references: [id])
  profile   Profile[]
}

model EmploymentDetails {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  employmentStatus    String
  natureOfJob         String
  annualIncome        String
  employerName        String
  employerPhoneNumber String
  employerAddress     String
  userId              String   @unique
  user                User     @relation("EmploymentDetails", fields: [userId], references: [id], onDelete: Cascade)
}

model Orphan {
  id                      String               @id @default(uuid())
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  deletionReason          String?
  picture                 String?
  schoolName              String?
  schoolStatus            Boolean?
  schoolAddress           String?
  schoolContactPerson     String?
  schoolContactPhone      String?
  affidavitOfGuardianship String
  createdByUserId         String?
  userId                  String               @unique
  updatedByUserId         String?
  status                  Status               @default(draft)
  actionLogs              ActionLog[]
  createdBy               User?                @relation("orphan_created_by", fields: [createdByUserId], references: [id])
  updatedBy               User?                @relation("orphan_updated_by", fields: [updatedByUserId], references: [id])
  user                    User                 @relation("OrphanProfile", fields: [userId], references: [id], onDelete: Cascade)
  Request                 Request[]            @relation("RequestOrphans")
  SponsorshipRequest      SponsorshipRequest[] @relation("SponsorshipRequestOrphans")

  @@map("orphans")
}

model Request {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  status              String
  isApproved          Boolean   @default(false)
  isDeleted           String?
  deletionReason      String?
  description         String
  supportingDocuments String[]
  createdByUserId     String?
  updatedByUserId     String?
  needId              String
  Donation            Donation? @relation("RequestDonations")
  createdBy           User?     @relation("request_created_by", fields: [createdByUserId], references: [id])
  need                Need      @relation(fields: [needId], references: [id])
  updatedBy           User?     @relation("request_updated_by", fields: [updatedByUserId], references: [id])
  orphans             Orphan[]  @relation("RequestOrphans")

  @@map("requests")
}

model SponsorshipRequest {
  id                  String               @id @default(uuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  title               String
  description         String
  targetAmount        Float
  amountReceived      Float                @default(0.0)
  deadline            DateTime
  status              Status               @default(draft)
  createdByUserId     String?
  updatedByUserId     String?
  DonationRequest     DonationRequest[]
  actionLogs          ActionLog[]
  createdBy           User?                @relation("sponsorship_created_by", fields: [createdByUserId], references: [id])
  updatedBy           User?                @relation("sponsorship_updated_by", fields: [updatedByUserId], references: [id])
  supportingDocuments SupportingDocument[]
  donations           Donation[]           @relation("SponsorshipRequestDonations")
  orphans             Orphan[]             @relation("SponsorshipRequestOrphans")

  @@map("sponsorship_requests")
}

model ActionLog {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  action Action?

  fromStatus Status?
  toStatus   Status?

  snapshot Json?
  change   Json?

  comment String?

  orphanId String?
  orphan   Orphan? @relation(fields: [orphanId], references: [id])

  sponsorshipRequestId String?
  SponsorshipRequest   SponsorshipRequest? @relation(fields: [sponsorshipRequestId], references: [id])

  createdByUserId String?
  createdBy       User?   @relation(fields: [createdByUserId], references: [id])

  @@map("action_logs")
}

model SupportingDocument {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  sponsorshipRequestId String
  title                String             @default("")
  description          String             @default("")
  url                  String
  isArchived           Boolean            @default(false)
  SponsorshipRequest   SponsorshipRequest @relation(fields: [sponsorshipRequestId], references: [id])

  @@map("supporting_documents")
}

model Need {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  name                String    @unique
  description         String?
  additionalInfo      Json?
  supportiveDocuments String?
  requests            Request[]
}

model Donation {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  amountNeeded       Float
  amountRecieved     Float                @default(0)
  amountDonated      Float                @default(0)
  requestId          String               @unique
  userId             String
  createdByUserId    String?
  updatedByUserId    String?
  createdBy          User?                @relation("donation_created_by", fields: [createdByUserId], references: [id])
  request            Request              @relation("RequestDonations", fields: [requestId], references: [id])
  updatedBy          User?                @relation("donation_updated_by", fields: [updatedByUserId], references: [id])
  user               User                 @relation("UserDonations", fields: [userId], references: [id])
  SponsorshipRequest SponsorshipRequest[] @relation("SponsorshipRequestDonations")
}

model BankDetails {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accountNumber String
  accountName   String
  bankName      String
  userId        String
  user          User     @relation("UserBankDetails", fields: [userId], references: [id])

  @@map("bank_details")
}

model DonationRequest {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  amountDonated        Float              @default(0)
  remark               String?
  createdByUserId      String?
  updatedByUserId      String?
  paymentGateway       String?
  paymentStatus        String             @default("pending")
  sponsorshipId        String
  transactionReference String?            @unique
  createdBy            User?              @relation("donation_created_by", fields: [createdByUserId], references: [id])
  sponsorship          SponsorshipRequest @relation(fields: [sponsorshipId], references: [id])
  updatedBy            User?              @relation("donation_updated_by", fields: [updatedByUserId], references: [id])
}

enum Status {
  draft
  pending
  approved
  rejected
  deleted
  closed
  published
  reopened
  approval_requested
  edit_requested
  publish_requested
  approval_rejected
  edit_rejected
  publish_rejected
  edit_approved
  reopen_requested
  reopen_rejected
  reopen_publish_requested
  reopen_publish_rejected
}

enum Action {
  create
  edit
  delete
  approve
  reject
  publish
  request_approval
  request_edit
  request_publish
  close
  reject_edit
  reject_publish
  approve_edit
  approve_publish
  request_reopen
  approve_reopen
  reject_reopen
  request_reopen_publish
  approve_reopen_publish
  reject_reopen_publish
}
