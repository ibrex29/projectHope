generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String              @id @default(uuid())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  isVerified             Boolean             @default(false)
  isDeleted              Boolean             @default(false)
  isAchieved             Boolean             @default(false)
  phoneNumber            String?
  email                  String?             @unique
  password               String
  isActive               Boolean             @default(false)
  authStrategy           String?
  createdDonation        Donation[]          @relation("donation_created_by")
  updatedDonation        Donation[]          @relation("donation_updated_by")
  donations              Donation[]          @relation("UserDonations")
  EmployementDetails     EmployementDetails? @relation("EmployementDetails")
  createdLocalGovernment LocalGovernment[]   @relation("localGovernment_created_by")
  updatedLocalGovernment LocalGovernment[]   @relation("localGovernment_updated_by")
  createdState           State[]             @relation("state_created_by")
  updatedState           State[]             @relation("state_updated_by")
  bankDetails            BankDetails[]       @relation("UserBankDetails")
  createdOrphan          Orphan[]            @relation("orphan_created_by")
  updatedOrphan          Orphan[]            @relation("orphan_updated_by")
  Orphan                 Orphan?             @relation("OrphanProfile")
  createdPermissions     Permission[]        @relation("permission_created_by")
  updatedPermissions     Permission[]        @relation("permission_updated_by")
  createdProfiles        Profile[]           @relation("profile_created_by")
  updatedProfiles        Profile[]           @relation("profile_updated_by")
  profile                Profile?            @relation("UserProfile")
  createdRequest         Request[]           @relation("request_created_by")
  updatedRequest         Request[]           @relation("request_updated_by")
  Request                Request?            @relation("created_equest")
  createdIdentities      Identity[]          @relation("identity_created_by")
  updatedIdentities      Identity[]          @relation("identity_updated_by")
  roles                  Role[]              @relation("UserRoles")

  @@map("users")
}

model Profile {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  firstName         String?
  middleName        String?
  lastName          String?
  localGovernmentId String?
  dateOfBirth       DateTime?
  homeAddress       String?
  maritalStatus     String?
  phoneNumber       String?
  picture           String?
  userId            String           @unique
  createdByUserId   String?
  updatedByUserId   String?
  gender            String?
  createdBy         User?            @relation("profile_created_by", fields: [createdByUserId], references: [id])
  localGovernment   LocalGovernment? @relation(fields: [localGovernmentId], references: [id])
  updatedBy         User?            @relation("profile_updated_by", fields: [updatedByUserId], references: [id])
  user              User             @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  identities        Identity[]

  @@map("profiles")
}

model Role {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roleName    String       @unique
  description String?
  isActive    Boolean      @default(true)
  permissions Permission[] @relation("RolePermissions")
  user        User[]       @relation("UserRoles")

  @@map("roles")
}

model Permission {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  permissionName  String   @unique
  isActive        Boolean  @default(true)
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?    @relation("permission_created_by", fields: [createdByUserId], references: [id])
  updatedBy       User?    @relation("permission_updated_by", fields: [updatedByUserId], references: [id])
  role            Role[]   @relation("RolePermissions")

  @@map("permissions")
}

model Identity {
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  number          String
  issuedBy        String?
  issueDate       DateTime?
  expiryDate      DateTime?
  profileId       String?
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?     @relation("identity_created_by", fields: [createdByUserId], references: [id])
  profile         Profile?  @relation(fields: [profileId], references: [id])
  updatedBy       User?     @relation("identity_updated_by", fields: [updatedByUserId], references: [id])

  @@id([name, number], name: "identityId")
  @@map("user_identity")
}

model State {
  id               String            @id @default(uuid())
  name             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdByUserId  String?
  updatedByUserId  String?
  localGovernments LocalGovernment[] @relation("StateToLocalGovernment")
  createdBy        User?             @relation("state_created_by", fields: [createdByUserId], references: [id])
  updatedBy        User?             @relation("state_updated_by", fields: [updatedByUserId], references: [id])
}

model LocalGovernment {
  id              String    @id @default(uuid())
  name            String
  stateId         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?     @relation("localGovernment_created_by", fields: [createdByUserId], references: [id])
  state           State     @relation("StateToLocalGovernment", fields: [stateId], references: [id])
  updatedBy       User?     @relation("localGovernment_updated_by", fields: [updatedByUserId], references: [id])
  profile         Profile[]
}

model EmployementDetails {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  employementStatus   String
  natureOfJob         String
  annualIncome        String
  employerName        String
  employerPhoneNumber String
  employerAddress     String
  userId              String   @unique
  user                User     @relation("EmployementDetails", fields: [userId], references: [id], onDelete: Cascade)
}

model Orphan {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  trackingNumber          String
  picture                 String?
  schoolStatus            Boolean?
  schoolAddress           String?
  schoolContactPerson     String?
  schoolContactPhone      String?
  affidavitOfGuardianship String
  createdByUserId         String?
  userId                  String    @unique
  updatedByUserId         String?
  isAccepted              Boolean   @default(false)
  schoolName              String?
  deletionReason          String?
  isDeleted               String?   @default("not_deleted")
  createdBy               User?     @relation("orphan_created_by", fields: [createdByUserId], references: [id])
  updatedBy               User?     @relation("orphan_updated_by", fields: [updatedByUserId], references: [id])
  user                    User      @relation("OrphanProfile", fields: [userId], references: [id], onDelete: Cascade)
  requests                Request[] @relation("OrphanRequests")

  @@map("orphans")
}

model Request {
  id              String     @id @default(uuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  status          String
  description     String
  orphanId        String
  createdByUserId String?
  isApproved      Boolean    @default(false)
  updatedByUserId String?
  userId          String     @unique
  isDeleted       String?
  deletionReason  String?
  donations       Donation[] @relation("RequestDonations")
  needs           Need[]     @relation("RequestNeeds")
  createdBy       User?      @relation("request_created_by", fields: [createdByUserId], references: [id])
  orphan          Orphan     @relation("OrphanRequests", fields: [orphanId], references: [id])
  updatedBy       User?      @relation("request_updated_by", fields: [updatedByUserId], references: [id])
  user            User       @relation("created_equest", fields: [userId], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Need {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  description         String?
  supportiveDocuments String?
  additionalInfo      Json?
  name                String   @unique
  requestId           String
  request             Request  @relation("RequestNeeds", fields: [requestId], references: [id])
}

model Donation {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  requestId       String
  userId          String
  amountNeeded    Float
  amountRecieved  Float    @default(0)
  amountDonated   Float    @default(0)
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?    @relation("donation_created_by", fields: [createdByUserId], references: [id])
  request         Request  @relation("RequestDonations", fields: [requestId], references: [id])
  updatedBy       User?    @relation("donation_updated_by", fields: [updatedByUserId], references: [id])
  user            User     @relation("UserDonations", fields: [userId], references: [id])
}

model BankDetails {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accountNumber String
  accountName   String
  bankName      String
  userId        String
  user          User     @relation("UserBankDetails", fields: [userId], references: [id])

  @@map("bank_details")
}
